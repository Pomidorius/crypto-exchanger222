// scripts/deploy-mainnet-real.js
const { ethers } = require("hardhat");
const fs = require('fs');

// –ê–¥—Ä–µ—Å–∞ Uniswap V3 –Ω–∞ mainnet
const UNISWAP_V3_ROUTER = "0xE592427A0AEce92De3Edee1F18E0157C05861564";
const UNISWAP_V3_QUOTER = "0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6";

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ mainnet
const SUPPORTED_TOKENS = [
  "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", // USDC
  "0xdAC17F958D2ee523a2206206994597C13D831ec7", // USDT
  "0x6B175474E89094C44Da98b954EedeAC495271d0F", // DAI
  "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599", // WBTC
  "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2", // WETH
];

async function main() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π RealProxySwap –Ω–∞ Ethereum Mainnet...");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
  const network = await ethers.provider.getNetwork();
  if (network.chainId !== 1) {
    throw new Error(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å! –û–∂–∏–¥–∞–µ—Ç—Å—è mainnet (1), –ø–æ–ª—É—á–µ–Ω–æ ${network.chainId}`);
  }
  
  console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ç–∏: ${network.name} (chainId: ${network.chainId})`);
  
  // –ü–æ–ª—É—á–∞–µ–º deployer
  const [deployer] = await ethers.getSigners();
  console.log(`üìù Deployer –∞–¥—Ä–µ—Å: ${deployer.address}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
  const balance = await deployer.getBalance();
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å deployer'–∞: ${ethers.utils.formatEther(balance)} ETH`);
  
  if (balance.lt(ethers.utils.parseEther("0.5"))) {
    throw new Error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –¥–µ–ø–ª–æ—è (–º–∏–Ω–∏–º—É–º 0.5 ETH)");
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≥–∞–∑–∞
  const gasPrice = await ethers.provider.getGasPrice();
  console.log(`‚õΩ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: ${ethers.utils.formatUnits(gasPrice, 'gwei')} gwei`);
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–µ –≥–∞–∑–∞
  const gasPriceGwei = parseFloat(ethers.utils.formatUnits(gasPrice, 'gwei'));
  if (gasPriceGwei > 50) {
    console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ (${gasPriceGwei} gwei)! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å.`);
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    // const readline = require('readline');
    // const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    // const answer = await new Promise(resolve => rl.question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ', resolve));
    // if (answer.toLowerCase() !== 'y') process.exit(0);
  }
  
  console.log("üì¶ –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç...");
  
  // –î–µ–ø–ª–æ–∏–º RealProxySwap
  const RealProxySwap = await ethers.getContractFactory("RealProxySwap");
  
  console.log("üöÄ –î–µ–ø–ª–æ–∏–º RealProxySwap –∫–æ–Ω—Ç—Ä–∞–∫—Ç...");
  console.log(`   Router: ${UNISWAP_V3_ROUTER}`);
  console.log(`   Quoter: ${UNISWAP_V3_QUOTER}`);
  
  const realProxySwap = await RealProxySwap.deploy(
    UNISWAP_V3_ROUTER,
    UNISWAP_V3_QUOTER,
    {
      gasPrice: gasPrice,
      gasLimit: 3000000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≥–∞–∑–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    }
  );
  
  console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –¥–µ–ø–ª–æ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
  await realProxySwap.deployed();
  
  console.log(`‚úÖ RealProxySwap –∑–∞–¥–µ–ø–ª–æ–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${realProxySwap.address}`);
  console.log(`üîó Etherscan: https://etherscan.io/address/${realProxySwap.address}`);
  
  // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–æ–≤...");
  await realProxySwap.deployTransaction.wait(5);
  
  console.log("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã...");
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
  for (const tokenAddress of SUPPORTED_TOKENS) {
    try {
      console.log(`   –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω: ${tokenAddress}`);
      const tx = await realProxySwap.setSupportedToken(tokenAddress, true, {
        gasPrice: gasPrice
      });
      await tx.wait(2);
      console.log(`   ‚úÖ –¢–æ–∫–µ–Ω ${tokenAddress} –¥–æ–±–∞–≤–ª–µ–Ω`);
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}:`, error.message);
    }
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è mainnet
  console.log("üí∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–≤–∞–ø–∞...");
  const minSwapAmount = ethers.utils.parseEther("0.01"); // 0.01 ETH –º–∏–Ω–∏–º—É–º
  const maxSwapAmount = ethers.utils.parseEther("50");   // 50 ETH –º–∞–∫—Å–∏–º—É–º
  
  const limitsResponse = await realProxySwap.setSwapLimits(minSwapAmount, maxSwapAmount, {
    gasPrice: gasPrice
  });
  await limitsResponse.wait(2);
  console.log(`‚úÖ –õ–∏–º–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${ethers.utils.formatEther(minSwapAmount)} - ${ethers.utils.formatEther(maxSwapAmount)} ETH`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–ª–æ–µ
  const deploymentInfo = {
    network: "mainnet",
    chainId: network.chainId,
    contractAddress: realProxySwap.address,
    deployerAddress: deployer.address,
    deploymentTxHash: realProxySwap.deployTransaction.hash,
    blockNumber: realProxySwap.deployTransaction.blockNumber,
    gasPrice: gasPrice.toString(),
    timestamp: new Date().toISOString(),
    supportedTokens: SUPPORTED_TOKENS,
    swapLimits: {
      min: minSwapAmount.toString(),
      max: maxSwapAmount.toString()
    },
    uniswapRouter: UNISWAP_V3_ROUTER,
    uniswapQuoter: UNISWAP_V3_QUOTER,
    etherscanUrl: `https://etherscan.io/address/${realProxySwap.address}`
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
  const deploymentFile = 'mainnet-deployment.json';
  fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
  console.log(`üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–ª–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${deploymentFile}`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –∫–æ–¥–µ
  console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...");
  try {
    updateConstants(realProxySwap.address);
    console.log("‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç:", error.message);
  }
  
  console.log("\nüéâ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!");
  console.log("=".repeat(50));
  console.log(`üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${realProxySwap.address}`);
  console.log(`üîó Etherscan: https://etherscan.io/address/${realProxySwap.address}`);
  console.log(`üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ ETH: ~${ethers.utils.formatEther(gasPrice.mul(3000000))} ETH`);
  console.log("=".repeat(50));
  
  console.log("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:");
  console.log("1. ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å NEXT_PUBLIC_CONTRACT_ADDRESS_MAINNET –≤ .env");
  console.log("2. ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ Etherscan");
  console.log("3. ‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º–∞—Ö");
  console.log("4. ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã");
  console.log("5. ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å");
  console.log("6. ‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ security –∞—É–¥–∏—Ç");
  console.log("7. ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å multisig –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º");
  
  console.log("\n‚ö†Ô∏è  –í–ê–ñ–ù–û:");
  console.log("- –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á deployer'–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ");
  console.log("- –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ownership –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ multisig –∫–æ—à–µ–ª–µ–∫");
  console.log("- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
  console.log("- –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è");
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –∫–æ–¥–µ
 */
function updateConstants(contractAddress) {
  const constantsPath = 'src/app/utils/constants.ts';
  
  if (!fs.existsSync(constantsPath)) {
    throw new Error(`–§–∞–π–ª –∫–æ–Ω—Å—Ç–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${constantsPath}`);
  }
  
  let content = fs.readFileSync(constantsPath, 'utf8');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è mainnet
  content = content.replace(
    /NEXT_PUBLIC_CONTRACT_ADDRESS_MAINNET.*?'0x[a-fA-F0-9]{40}'/,
    `NEXT_PUBLIC_CONTRACT_ADDRESS_MAINNET || '${contractAddress}'`
  );
  
  fs.writeFileSync(constantsPath, content);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå –û–®–ò–ë–ö–ê –î–ï–ü–õ–û–Ø:");
    console.error(error);
    
    if (error.message.includes('insufficient funds')) {
      console.error("\nüí° –†–ï–®–ï–ù–ò–ï: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å deployer'–∞");
    } else if (error.message.includes('gas')) {
      console.error("\nüí° –†–ï–®–ï–ù–ò–ï: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å gas limit –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞");
    } else if (error.message.includes('nonce')) {
      console.error("\nüí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ nonce —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
    }
    
    process.exit(1);
  });
