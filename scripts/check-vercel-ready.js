const fs = require('fs');
const path = require('path');

console.log('üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö VERCEL DEPLOYMENT\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º environment variables
console.log('üìã Environment Variables:');
console.log('==========================');

const requiredVars = [
  'NEXT_PUBLIC_CHAIN_ID',
  'NEXT_PUBLIC_RPC_URL', 
  'NEXT_PUBLIC_CONTRACT_ADDRESS_SEPOLIA',
  'NEXT_PUBLIC_PROJECT_ID'
];

let allGood = true;

requiredVars.forEach(varName => {
  const value = process.env[varName];
  const status = value && value !== 'dummy-project-id-for-local-dev' && value !== '0x0000000000000000000000000000000000000001';
  
  console.log(`${status ? '‚úÖ' : '‚ùå'} ${varName}: ${value || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}`);
  
  if (!status) allGood = false;
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª—ã
console.log('\nüìÅ Config Files:');
console.log('================');

const envFiles = ['.env.local', '.env', 'vercel.json', 'next.config.js'];
envFiles.forEach(file => {
  const exists = fs.existsSync(path.join(process.cwd(), file));
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}: ${exists ? 'EXISTS' : 'MISSING'}`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
console.log('\nüîß Contract Status:');
console.log('==================');

try {
  const constants = require('./src/app/utils/constants.ts');
  const contractAddress = process.env.NEXT_PUBLIC_CONTRACT_ADDRESS_SEPOLIA || '0x0000000000000000000000000000000000000001';
  const isDeployed = contractAddress !== '0x0000000000000000000000000000000000000001';
  
  console.log(`${isDeployed ? '‚úÖ' : '‚ùå'} Contract Address: ${contractAddress}`);
  console.log(`${isDeployed ? '‚úÖ' : '‚ùå'} Contract Deployed: ${isDeployed ? 'YES' : 'NO - NEEDS DEPLOYMENT'}`);
  
  if (!isDeployed) allGood = false;
} catch (error) {
  console.log('‚ùå Constants file error:', error.message);
  allGood = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
console.log('\nüî® Build Test:');
console.log('==============');

try {
  const { execSync } = require('child_process');
  console.log('üß™ Testing Next.js build...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
  execSync('npm run build:vercel', { stdio: 'pipe' });
  console.log('‚úÖ Build successful!');
} catch (error) {
  console.log('‚ùå Build failed:', error.message);
  allGood = false;
}

// –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:');
console.log('==================');

if (allGood) {
  console.log('üéâ –í–°–ï –ì–û–¢–û–í–û –î–õ–Ø VERCEL DEPLOYMENT!');
  console.log('');
  console.log('üìù Next steps:');
  console.log('1. –î–æ–±–∞–≤—å—Ç–µ environment variables –≤ Vercel Dashboard');
  console.log('2. –î–µ–ø–ª–æ–π—Ç–µ: git push origin main');
  console.log('3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ your-app.vercel.app');
} else {
  console.log('‚ö†Ô∏è  –ù–ï –ì–û–¢–û–í–û! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.');
  console.log('');
  console.log('üìñ –ß–∏—Ç–∞–π—Ç–µ VERCEL_READY_CHECKLIST.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π');
}

console.log('');

module.exports = { allGood };
