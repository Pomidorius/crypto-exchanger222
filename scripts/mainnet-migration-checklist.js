// scripts/mainnet-migration-checklist.js
const { ethers } = require("hardhat");
const fs = require('fs');

/**
 * –ß–µ–∫–ª–∏—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ mainnet
 */
async function runMainnetChecklist() {
  console.log("üîç –ß–ï–ö–õ–ò–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö MAINNET");
  console.log("=".repeat(50));
  
  const results = {
    passed: 0,
    failed: 0,
    warnings: 0,
    items: []
  };
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  await checkNetworkConfig(results);
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  await checkRPCProviders(results);
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
  await checkPrivateKeySecurity(results);
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  await checkContracts(results);
  
  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
  await checkTokenConfiguration(results);
  
  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  await checkMonitoring(results);
  
  // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  await checkFrontendConfig(results);
  
  // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  await checkSecurityMeasures(results);
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  printFinalReport(results);
  
  return results;
}

async function checkNetworkConfig(results) {
  console.log("\nüì° 1. –ü–†–û–í–ï–†–ö–ê –°–ï–¢–ï–í–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò");
  
  const chainId = process.env.NEXT_PUBLIC_CHAIN_ID;
  
  if (chainId === '1') {
    addResult(results, '‚úÖ', 'NEXT_PUBLIC_CHAIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ mainnet (1)');
  } else {
    addResult(results, '‚ùå', `NEXT_PUBLIC_CHAIN_ID = ${chainId}, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 –¥–ª—è mainnet`);
  }
  
  const rpcUrl = process.env.NEXT_PUBLIC_RPC_URL;
  if (rpcUrl && rpcUrl.includes('mainnet')) {
    addResult(results, '‚úÖ', 'RPC URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è mainnet');
  } else {
    addResult(results, '‚ùå', 'RPC URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è mainnet');
  }
}

async function checkRPCProviders(results) {
  console.log("\nüåê 2. –ü–†–û–í–ï–†–ö–ê RPC –ü–†–û–í–ê–ô–î–ï–†–û–í");
  
  const providers = [
    { name: 'INFURA', env: 'NEXT_PUBLIC_RPC_URL' },
    { name: 'ALCHEMY', env: 'NEXT_PUBLIC_ALCHEMY_KEY' },
    { name: 'QUICKNODE', env: 'NEXT_PUBLIC_QUICKNODE_URL' }
  ];
  
  let activeProviders = 0;
  
  for (const provider of providers) {
    if (process.env[provider.env] && process.env[provider.env] !== 'your_key_here') {
      addResult(results, '‚úÖ', `${provider.name} –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      activeProviders++;
    } else {
      addResult(results, '‚ö†Ô∏è', `${provider.name} –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    }
  }
  
  if (activeProviders >= 2) {
    addResult(results, '‚úÖ', '–ï—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã');
  } else {
    addResult(results, '‚ùå', '–ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2)');
  }
}

async function checkPrivateKeySecurity(results) {
  console.log("\nüîê 3. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–ò–í–ê–¢–ù–´–• –ö–õ–Æ–ß–ï–ô");
  
  const deployerKey = process.env.DEPLOYER_PRIVATE_KEY;
  const faucetKey = process.env.FAUCET_PRIVATE_KEY;
  
  if (!deployerKey || deployerKey === 'your_private_key_here') {
    addResult(results, '‚úÖ', 'DEPLOYER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ö–æ—Ä–æ—à–æ –¥–ª—è mainnet)');
  } else {
    addResult(results, '‚ùå', 'DEPLOYER_PRIVATE_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–î–ê–õ–ò–¢–ï –¥–ª—è mainnet!');
  }
  
  if (!faucetKey || faucetKey === 'your_faucet_private_key_here') {
    addResult(results, '‚úÖ', 'FAUCET_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è mainnet)');
  } else {
    addResult(results, '‚ùå', 'FAUCET_PRIVATE_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–î–ê–õ–ò–¢–ï –¥–ª—è mainnet!');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª—ã
  const envFiles = ['.env', '.env.local', '.env.production'];
  for (const file of envFiles) {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      if (content.includes('private_key') && !content.includes('your_private_key_here')) {
        addResult(results, '‚ùå', `–í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ ${file}!`);
      }
    }
  }
}

async function checkContracts(results) {
  console.log("\nüìú 4. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–†–ê–ö–¢–û–í");
  
  const mainnetAddress = process.env.NEXT_PUBLIC_CONTRACT_ADDRESS_MAINNET;
  
  if (mainnetAddress && mainnetAddress !== '0x0000000000000000000000000000000000000001') {
    addResult(results, '‚úÖ', '–ê–¥—Ä–µ—Å mainnet –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      const provider = new ethers.providers.JsonRpcProvider(process.env.NEXT_PUBLIC_RPC_URL);
      const code = await provider.getCode(mainnetAddress);
      if (code !== '0x') {
        addResult(results, '‚úÖ', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥');
      } else {
        addResult(results, '‚ùå', '–ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
      }
    } catch (error) {
      addResult(results, '‚ö†Ô∏è', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ' + error.message);
    }
  } else {
    addResult(results, '‚ùå', '–ê–¥—Ä–µ—Å mainnet –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å RealProxySwap.sol
  if (fs.existsSync('contracts/RealProxySwap.sol')) {
    addResult(results, '‚úÖ', 'RealProxySwap –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω');
  } else {
    addResult(results, '‚ùå', 'RealProxySwap –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

async function checkTokenConfiguration(results) {
  console.log("\nü™ô 5. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –¢–û–ö–ï–ù–û–í");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ mainnet
  const constantsPath = 'src/app/utils/constants.ts';
  if (fs.existsSync(constantsPath)) {
    const content = fs.readFileSync(constantsPath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ mainnet —Ç–æ–∫–µ–Ω–æ–≤
    const mainnetTokens = [
      '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', // USDC
      '0xdAC17F958D2ee523a2206206994597C13D831ec7', // USDT
      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', // WETH
    ];
    
    let foundTokens = 0;
    for (const tokenAddr of mainnetTokens) {
      if (content.includes(tokenAddr)) {
        foundTokens++;
      }
    }
    
    if (foundTokens >= 3) {
      addResult(results, '‚úÖ', '–†–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ mainnet —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } else {
      addResult(results, '‚ùå', '–ù–µ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ mainnet —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
  }
}

async function checkMonitoring(results) {
  console.log("\nüìä 6. –ü–†–û–í–ï–†–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê");
  
  const monitoringServices = [
    { name: 'Sentry', env: 'NEXT_PUBLIC_SENTRY_DSN' },
    { name: 'Etherscan API', env: 'ETHERSCAN_API_KEY' },
    { name: 'Telegram Bot', env: 'TELEGRAM_BOT_TOKEN' },
  ];
  
  for (const service of monitoringServices) {
    if (process.env[service.env] && process.env[service.env] !== 'your_key_here') {
      addResult(results, '‚úÖ', `${service.name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    } else {
      addResult(results, '‚ö†Ô∏è', `${service.name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    }
  }
}

async function checkFrontendConfig(results) {
  console.log("\nüé® 7. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–±—Ä–∞–Ω—ã –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
  const componentFiles = [
    'src/app/components/TestFaucet.tsx',
    'src/app/components/ImprovedSwapForm.tsx'
  ];
  
  for (const file of componentFiles) {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      if (content.includes('–î–µ–º–æ') || content.includes('üé≠')) {
        addResult(results, '‚ö†Ô∏è', `${file} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è`);
      } else {
        addResult(results, '‚úÖ', `${file} –≥–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞`);
      }
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º vercel.json
  if (fs.existsSync('vercel.json')) {
    addResult(results, '‚úÖ', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vercel –Ω–∞–π–¥–µ–Ω–∞');
  } else {
    addResult(results, '‚ö†Ô∏è', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vercel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
}

async function checkSecurityMeasures(results) {
  console.log("\nüõ°Ô∏è 8. –ü–†–û–í–ï–†–ö–ê –úER –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò");
  
  const securityFiles = [
    'SECURITY.md',
    'AUDIT_REPORT.md',
    'INCIDENT_RESPONSE.md'
  ];
  
  for (const file of securityFiles) {
    if (fs.existsSync(file)) {
      addResult(results, '‚úÖ', `${file} –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤`);
    } else {
      addResult(results, '‚ö†Ô∏è', `${file} –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ—Å—Ç—ã
  if (fs.existsSync('test/') && fs.readdirSync('test/').length > 0) {
    addResult(results, '‚úÖ', '–¢–µ—Å—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
  } else {
    addResult(results, '‚ùå', '–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
}

function addResult(results, status, message) {
  results.items.push({ status, message });
  console.log(`  ${status} ${message}`);
  
  if (status === '‚úÖ') results.passed++;
  else if (status === '‚ùå') results.failed++;
  else if (status === '‚ö†Ô∏è') results.warnings++;
}

function printFinalReport(results) {
  console.log("\n" + "=".repeat(60));
  console.log("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ö MAINNET");
  console.log("=".repeat(60));
  
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.failed}`);
  console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${results.warnings}`);
  
  const total = results.passed + results.failed + results.warnings;
  const score = (results.passed / total * 100).toFixed(1);
  
  console.log(`\nüìä –û–±—â–∏–π —Å—á–µ—Ç: ${score}%`);
  
  if (results.failed === 0 && results.warnings <= 2) {
    console.log("\nüéâ –ì–û–¢–û–í –ö MAINNET! ‚úÖ");
    console.log("–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã.");
  } else if (results.failed === 0) {
    console.log("\n‚ö†Ô∏è  –ü–û–ß–¢–ò –ì–û–¢–û–í –ö MAINNET");
    console.log("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.");
  } else {
    console.log("\n‚ùå –ù–ï –ì–û–¢–û–í –ö MAINNET!");
    console.log("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.");
  }
  
  if (results.failed > 0) {
    console.log("\nüîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:");
    results.items
      .filter(item => item.status === '‚ùå')
      .forEach((item, index) => {
        console.log(`${index + 1}. ${item.message}`);
      });
  }
  
  console.log("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú:");
  console.log("1. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Sepolia");
  console.log("2. –°–¥–µ–ª–∞–π—Ç–µ security –∞—É–¥–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤");
  console.log("3. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è");
  console.log("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫");
  console.log("5. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å");
  console.log("6. –£–≤–µ–¥–æ–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ –∑–∞–ø—É—Å–∫–µ");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ–∫–ª–∏—Å—Ç
if (require.main === module) {
  runMainnetChecklist()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —á–µ–∫–ª–∏—Å—Ç–∞:", error);
      process.exit(1);
    });
}

module.exports = { runMainnetChecklist };
