const fs = require('fs');
const path = require('path');

async function updateProxySwapAddress() {
  try {
    // –ò—â–µ–º deployment —Ñ–∞–π–ª—ã (—Å–Ω–∞—á–∞–ª–∞ localhost, –ø–æ—Ç–æ–º mainnet)
    let deploymentPath = path.join(__dirname, '..', 'localhost-deployment.json');
    let networkName = 'testnet/localhost';
    
    if (!fs.existsSync(deploymentPath)) {
      deploymentPath = path.join(__dirname, '..', 'mainnet-deployment.json');
      networkName = 'mainnet';
    }
    
    if (!fs.existsSync(deploymentPath)) {
      console.error('‚ùå No deployment file found. Deploy contract first with:');
      console.error('   npm run deploy:sepolia (for testnet)');
      console.error('   npm run deploy:mainnet (for mainnet)');
      return;
    }
    
    const deployment = JSON.parse(fs.readFileSync(deploymentPath, 'utf8'));
    const contractAddress = deployment.contractAddress;
    
    console.log(`üìç Contract address from ${networkName}:`, contractAddress);
    
    // –ß–∏—Ç–∞–µ–º constants.ts
    const constantsPath = path.join(__dirname, '..', 'src', 'app', 'utils', 'constants.ts');
    let content = fs.readFileSync(constantsPath, 'utf8');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º PROXY_SWAP_ADDRESS
    const oldPattern = /export const PROXY_SWAP_ADDRESS = '[^']*';/;
    const newLine = `export const PROXY_SWAP_ADDRESS = '${contractAddress}';`;
    
    if (oldPattern.test(content)) {
      content = content.replace(oldPattern, newLine);
    } else {
      // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      const insertPattern = /(\/\/ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å ProxySwap –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –≤ mainnet\n)/;
      content = content.replace(insertPattern, `$1${newLine}\n`);
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(constantsPath, content);
    
    console.log('‚úÖ constants.ts updated successfully!');
    console.log('üìã PROXY_SWAP_ADDRESS set to:', contractAddress);
    
  } catch (error) {
    console.error('‚ùå Error updating constants.ts:', error.message);
  }
}

updateProxySwapAddress();
