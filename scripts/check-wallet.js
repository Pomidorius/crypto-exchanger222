const { ethers } = require("hardhat");
require('dotenv').config({ path: '.env.local' });

async function main() {
  console.log("üîç Checking wallet balance for mainnet deployment...");
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ .env.local
    const privateKey = process.env.DEPLOYER_PRIVATE_KEY;
    
    if (!privateKey) {
      console.error("‚ùå DEPLOYER_PRIVATE_KEY not found in .env.local");
      console.log("üí° Please add your private key to .env.local:");
      console.log("DEPLOYER_PRIVATE_KEY=0xYourPrivateKeyHere");
      return;
    }
    
    if (privateKey === "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80") {
      console.error("‚ùå You're using the default test private key!");
      console.log("üö® This key has no ETH on mainnet and should NEVER be used for real deployments");
      console.log("üí° Please replace with your real private key that has ETH");
      return;
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ mainnet
    const provider = new ethers.JsonRpcProvider(process.env.NEXT_PUBLIC_RPC_URL);
    const wallet = new ethers.Wallet(privateKey, provider);
    
    console.log("üìç Wallet address:", wallet.address);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await provider.getBalance(wallet.address);
    const balanceInEth = ethers.formatEther(balance);
    
    console.log("üí∞ Current balance:", balanceInEth, "ETH");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    const minRequired = 0.05;
    if (parseFloat(balanceInEth) < minRequired) {
      console.error(`‚ùå Insufficient balance! Need at least ${minRequired} ETH for deployment`);
      console.log("üí° Please add more ETH to this address before deploying");
      return;
    }
    
    console.log("‚úÖ Balance is sufficient for deployment");
    console.log("\nüöÄ Ready to deploy! Run:");
    console.log("npm run mainnet:deploy-improved  # for ImprovedProxySwap with fees");
    console.log("npm run mainnet:deploy          # for standard ProxySwap");
    
  } catch (error) {
    console.error("‚ùå Error checking balance:", error.message);
    
    if (error.message.includes("invalid private key")) {
      console.log("üí° Please check your private key format in .env.local");
      console.log("Should be: DEPLOYER_PRIVATE_KEY=0x...");
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Script failed:", error);
    process.exit(1);
  });
