const { ethers } = require("hardhat");

async function main() {
  console.log("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ImprovedProxySwap –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
  
  // –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const PROXY_SWAP_ADDRESS = "0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43";
  
  // –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Sepolia
  const TOKENS = {
    ETH: "0x0000000000000000000000000000000000000000", // Native ETH
    USDC: "0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238", // Sepolia USDC
    USDT: "0x509Ee0d083DdF8AC028f2a56731412edD63223B9", // Sepolia USDT  
    WETH: "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9"  // Sepolia WETH
  };
  
  // Exchange rates (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã)
  const RATES = {
    // ETH -> USDC (1 ETH = ~3000 USDC)
    ETH_TO_USDC: ethers.parseUnits("3000", 6), // 6 decimals –¥–ª—è USDC
    // ETH -> USDT (1 ETH = ~3000 USDT)  
    ETH_TO_USDT: ethers.parseUnits("3000", 6), // 6 decimals –¥–ª—è USDT
    // USDC -> ETH (1 USDC = ~0.00033 ETH)
    USDC_TO_ETH: ethers.parseUnits("0.00033", 18),
    // USDT -> ETH (1 USDT = ~0.00033 ETH)
    USDT_TO_ETH: ethers.parseUnits("0.00033", 18)
  };
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
  const [signer] = await ethers.getSigners();
  console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å:", signer.address);
  
  const proxySwap = await ethers.getContractAt("ImprovedProxySwap", PROXY_SWAP_ADDRESS, signer);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const owner = await proxySwap.owner();
    console.log("üëë –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", owner);
    console.log("üîë –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:", signer.address);
    
    if (owner.toLowerCase() !== signer.address.toLowerCase()) {
      console.log("‚ùå –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞! –ù—É–∂–µ–Ω –∞–¥—Ä–µ—Å:", owner);
      return;
    }
    
    console.log("‚úÖ –í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞! –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º exchange rates...");
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º exchange rates
    console.log("\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞:");
    
    // ETH -> USDC
    console.log("üîÑ ETH -> USDC...");
    const tx1 = await proxySwap.setExchangeRate(TOKENS.ETH, TOKENS.USDC, RATES.ETH_TO_USDC);
    await tx1.wait();
    console.log("‚úÖ ETH -> USDC —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    
    // ETH -> USDT
    console.log("üîÑ ETH -> USDT...");
    const tx2 = await proxySwap.setExchangeRate(TOKENS.ETH, TOKENS.USDT, RATES.ETH_TO_USDT);
    await tx2.wait();
    console.log("‚úÖ ETH -> USDT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    
    // USDC -> ETH
    console.log("üîÑ USDC -> ETH...");
    const tx3 = await proxySwap.setExchangeRate(TOKENS.USDC, TOKENS.ETH, RATES.USDC_TO_ETH);
    await tx3.wait();
    console.log("‚úÖ USDC -> ETH —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    
    // USDT -> ETH
    console.log("üîÑ USDT -> ETH...");
    const tx4 = await proxySwap.setExchangeRate(TOKENS.USDT, TOKENS.ETH, RATES.USDT_TO_ETH);
    await tx4.wait();
    console.log("‚úÖ USDT -> ETH —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:");
    const ethToUsdc = await proxySwap.exchangeRates(TOKENS.ETH, TOKENS.USDC);
    const ethToUsdt = await proxySwap.exchangeRates(TOKENS.ETH, TOKENS.USDT);
    console.log("ETH -> USDC:", ethers.formatUnits(ethToUsdc, 6));
    console.log("ETH -> USDT:", ethers.formatUnits(ethToUsdt, 6));
    
    // –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    console.log("\nüí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:");
    const ethBalance = await proxySwap.getContractBalance(TOKENS.ETH);
    const usdcBalance = await proxySwap.getContractBalance(TOKENS.USDC);
    const usdtBalance = await proxySwap.getContractBalance(TOKENS.USDT);
    
    console.log("ETH –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", ethers.formatEther(ethBalance));
    console.log("USDC –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", ethers.formatUnits(usdcBalance, 6));
    console.log("USDT –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", ethers.formatUnits(usdtBalance, 6));
    
    // –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç ETH –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    if (ethBalance < ethers.parseEther("0.1")) {
      console.log("\nüí∏ –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç ETH...");
      const fundTx = await proxySwap.fundContract({ value: ethers.parseEther("0.1") });
      await fundTx.wait();
      console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 0.1 ETH");
    }
    
    console.log("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    console.log("üîó –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:");
    console.log(`   https://sepolia.etherscan.io/address/${PROXY_SWAP_ADDRESS}`);
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:", error.message);
    
    if (error.message.includes("Ownable: caller is not the owner")) {
      console.log("\nüí° –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞");
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
