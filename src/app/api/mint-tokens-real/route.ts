import { NextRequest, NextResponse } from 'next/server'
import { ethers, Contract } from 'ethers'

// ABI –¥–ª—è MockERC20 —Ç–æ–∫–µ–Ω–æ–≤ (—Å —Ñ—É–Ω–∫—Ü–∏–µ–π mint)
const MOCK_ERC20_ABI = [
  'function mint(address to, uint256 amount) external',
  'function balanceOf(address account) view returns (uint256)',
  'function decimals() view returns (uint8)',
  'function symbol() view returns (string)',
  'function owner() view returns (address)'
]

// –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç—è—Ö
const TOKEN_CONTRACTS = {
  // Sepolia testnet
  '11155111': {
    USDC: '0x82532e843530D8734F5Cf84eb833fab19394dfd2',
    USDT: '0xFA195D6c7c0Ed19E913E30e6F019E0B13cD1e77d'
  },
  // Mainnet (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–µ –º–∏–Ω—Ç—è—Ç—Å—è)
  '1': {
    USDC: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
    USDT: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
  }
}

// –õ–∏–º–∏—Ç—ã –º–∏–Ω—Ç–∏–Ω–≥–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
const MINT_LIMITS = {
  USDC: ethers.utils.parseUnits('1000', 18), // 1000 USDC
  USDT: ethers.utils.parseUnits('1000', 18), // 1000 USDT
  ETH: ethers.utils.parseEther('0.1')         // 0.1 ETH
}

// –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –º–∏–Ω—Ç–∏–Ω–≥–∞–º–∏ (24 —á–∞—Å–∞)
const MINT_COOLDOWN = 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/DB)
const mintCooldowns = new Map<string, number>()

export async function POST(request: NextRequest) {
  try {
    const { address, token } = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!address || typeof address !== 'string' || !address.startsWith('0x') || address.length !== 42) {
      return NextResponse.json({ error: 'Invalid address' }, { status: 400 })
    }

    if (!token || !['USDC', 'USDT', 'ETH'].includes(token)) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 400 })
    }

    const chainId = process.env.NEXT_PUBLIC_CHAIN_ID || '11155111'
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    const cooldownKey = `${address}-${token}`
    const lastMint = mintCooldowns.get(cooldownKey) || 0
    const now = Date.now()
    
    if (now - lastMint < MINT_COOLDOWN) {
      const remainingTime = Math.ceil((MINT_COOLDOWN - (now - lastMint)) / 1000 / 60) // –≤ –º–∏–Ω—É—Ç–∞—Ö
      return NextResponse.json({ 
        error: `–ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${remainingTime} –º–∏–Ω—É—Ç` 
      }, { status: 429 })
    }

    // –î–ª—è ETH –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ faucet'—ã
    if (token === 'ETH') {
      return NextResponse.json({
        success: true,
        message: 'üö∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ETH –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–µ faucet\'—ã',
        faucets: [
          'https://sepoliafaucet.com/',
          'https://faucet.quicknode.com/ethereum/sepolia',
          'https://sepolia-faucet.pk910.de/'
        ],
        amount: '0.1',
        token: 'ETH'
      })
    }

    // –î–ª—è mainnet - –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–∏–Ω—Ç–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    if (chainId === '1') {
      return NextResponse.json({
        error: '–ú–∏–Ω—Ç–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ mainnet –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DEX –¥–ª—è –ø–æ–∫—É–ø–∫–∏.'
      }, { status: 403 })
    }

    // –ú–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ
    if (chainId === '11155111') {
      const result = await mintTestnetTokens(address, token as 'USDC' | 'USDT')
      
      if (result.success) {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∏–Ω—Ç–∏–Ω–≥–∞
        mintCooldowns.set(cooldownKey, now)
      }
      
      return NextResponse.json(result)
    }

    // Fallback - –¥–µ–º–æ —Ä–µ–∂–∏–º –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
    await new Promise(resolve => setTimeout(resolve, 2000))
    const fakeHash = '0x' + Array.from({length: 64}, () => Math.floor(Math.random() * 16).toString(16)).join('')

    return NextResponse.json({
      success: true,
      txHash: fakeHash,
      amount: token === 'ETH' ? '0.1' : '1000',
      token,
      message: `‚úÖ –î–µ–º–æ: ${token === 'ETH' ? '0.1' : '1000'} ${token} "–ø–æ–ª—É—á–µ–Ω—ã" (—Å–∏–º—É–ª—è—Ü–∏—è)`
    })

  } catch (error: unknown) {
    console.error('Mint error:', error)
    return NextResponse.json({
      error: 'Failed to mint tokens',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

/**
 * –†–µ–∞–ª—å–Ω—ã–π –º–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ
 */
async function mintTestnetTokens(address: string, token: 'USDC' | 'USDT') {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const rpcUrl = process.env.NEXT_PUBLIC_RPC_URL || 'https://sepolia.infura.io/v3/demo'
    const provider = new ethers.providers.JsonRpcProvider(rpcUrl)
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å owner –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
    const privateKey = process.env.FAUCET_PRIVATE_KEY
    if (!privateKey || privateKey === 'your_private_key_here') {
      throw new Error('FAUCET_PRIVATE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }
    
    const wallet = new ethers.Wallet(privateKey, provider)
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    const tokenAddress = TOKEN_CONTRACTS['11155111'][token]
    if (!tokenAddress) {
      throw new Error(`–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è ${token} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const tokenContract = new Contract(tokenAddress, MOCK_ERC20_ABI, wallet)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ wallet —è–≤–ª—è–µ—Ç—Å—è owner'–æ–º (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    try {
      const owner = await tokenContract.owner()
      if (owner.toLowerCase() !== wallet.address.toLowerCase()) {
        throw new Error('Wallet –Ω–µ —è–≤–ª—è–µ—Ç—Å—è owner\'–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')
      }
    } catch (err) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å owner\'–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', err)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ owner
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞
    const mintAmount = MINT_LIMITS[token]
    
    console.log(`üîÑ –ú–∏–Ω—Ç–∏–Ω–≥ ${ethers.utils.formatUnits(mintAmount, 18)} ${token} –¥–ª—è ${address}`)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–Ω—Ç–∏–Ω–≥
    const tx = await tokenContract.mint(address, mintAmount)
    console.log(`‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`)
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const receipt = await tx.wait()
    console.log(`‚úÖ –ú–∏–Ω—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${receipt.transactionHash}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    const newBalance = await tokenContract.balanceOf(address)
    const formattedBalance = ethers.utils.formatUnits(newBalance, 18)
    
    return {
      success: true,
      txHash: receipt.transactionHash,
      amount: ethers.utils.formatUnits(mintAmount, 18),
      token,
      newBalance: formattedBalance,
      message: `‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω–æ ${ethers.utils.formatUnits(mintAmount, 18)} ${token}!`,
      explorerUrl: `https://sepolia.etherscan.io/tx/${receipt.transactionHash}`
    }
    
  } catch (error: unknown) {
    console.error('–û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤:', error)
    
    const err = error as { code?: string; message?: string; reason?: string }
    
    let errorMessage = '–û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤'
    
    if (err.code === 'INSUFFICIENT_FUNDS') {
      errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –≥–∞–∑–∞ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ faucet\'–∞'
    } else if (err.message?.includes('owner')) {
      errorMessage = '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤'
    } else if (err.message?.includes('network')) {
      errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏'
    } else {
      errorMessage = err.message || err.reason || errorMessage
    }
    
    return {
      success: false,
      error: errorMessage,
      details: err.message
    }
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const address = searchParams.get('address')
    const token = searchParams.get('token')
    
    if (!address || !token) {
      return NextResponse.json({ error: 'Missing address or token' }, { status: 400 })
    }
    
    const cooldownKey = `${address}-${token}`
    const lastMint = mintCooldowns.get(cooldownKey) || 0
    const now = Date.now()
    const remainingTime = Math.max(0, MINT_COOLDOWN - (now - lastMint))
    
    return NextResponse.json({
      canMint: remainingTime === 0,
      remainingTime: Math.ceil(remainingTime / 1000 / 60), // –≤ –º–∏–Ω—É—Ç–∞—Ö
      lastMint: lastMint > 0 ? new Date(lastMint).toISOString() : null
    })
    
  } catch (error) {
    return NextResponse.json({ error: 'Failed to get cooldown status' }, { status: 500 })
  }
}
