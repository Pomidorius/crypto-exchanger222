import { NextRequest, NextResponse } from 'next/server'

// –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ Sepolia (–Ω–∞—à–∏ –Ω–æ–≤—ã–µ MockERC20 —Ç–æ–∫–µ–Ω—ã)
const TOKENS = {
  USDC: '0x82532e843530D8734F5Cf84eb833fab19394dfd2',
  USDT: '0xFA195D6c7c0Ed19E913E30e6F019E0B13cD1e77d',
  ETH: '0x0000000000000000000000000000000000000000' // Native ETH
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–Ω—Ç–∏–Ω–≥–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ –¥–µ–º–æ —Ä–µ–∂–∏–º
 */
export async function POST(request: NextRequest) {
  try {
    const { address, token } = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!address || typeof address !== 'string' || !address.startsWith('0x') || address.length !== 42) {
      return NextResponse.json({ error: 'Invalid address' }, { status: 400 })
    }

    if (!token || !TOKENS[token as keyof typeof TOKENS]) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 400 })
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –º–∏–Ω—Ç–∏–Ω–≥
    const shouldUseReal = shouldUseRealMinting()
    
    if (shouldUseReal) {
      console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ô –º–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤')
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API
      try {
        const realMintResponse = await fetch(`${request.nextUrl.origin}/api/mint-tokens-real`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ address, token }),
        })
        
        const result = await realMintResponse.json()
        return NextResponse.json(result, { status: realMintResponse.status })
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏–Ω—Ç–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error)
        // Fallback –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º
      }
    }
    
    // –î–µ–º–æ –º–∏–Ω—Ç–∏–Ω–≥ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    console.log('üé≠ –í—ã–ø–æ–ª–Ω—è–µ–º –î–ï–ú–û –º–∏–Ω—Ç–∏–Ω–≥ (—Å–∏–º—É–ª—è—Ü–∏—è)')
    return await executeDemoMinting(address, token)

  } catch (error: unknown) {
    console.error('Mint error:', error)
    return NextResponse.json({
      error: 'Failed to mint tokens',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –º–∏–Ω—Ç–∏–Ω–≥
 */
function shouldUseRealMinting(): boolean {
  const chainId = process.env.NEXT_PUBLIC_CHAIN_ID || '1'
  
  // –î–ª—è localhost –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ
  if (chainId === '31337') {
    return false
  }
  
  // –î–ª—è sepolia –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–∏–Ω—Ç–∏–Ω–≥ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω FAUCET_PRIVATE_KEY)
  if (chainId === '11155111') {
    const faucetKey = process.env.FAUCET_PRIVATE_KEY
    return !!(faucetKey && faucetKey !== 'your_private_key_here')
  }
  
  // –î–ª—è mainnet –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω—Ç–∏–Ω–≥
  return false
}

/**
 * –î–µ–º–æ –º–∏–Ω—Ç–∏–Ω–≥ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
 */
async function executeDemoMinting(address: string, token: string) {
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–∏–Ω—Ç–∏–Ω–≥–∞
  await new Promise(resolve => setTimeout(resolve, 2000))

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const fakeHash = '0x' + Array.from({length: 64}, () => Math.floor(Math.random() * 16).toString(16)).join('')

  // –†–∞–∑–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  const amounts = {
    USDC: '1000',
    USDT: '1000', 
    ETH: '0.1'
  }
  
  const amount = amounts[token as keyof typeof amounts] || '0'
  const tokenDisplay = token === 'ETH' ? 'SepoliaETH' : token

  return NextResponse.json({
    success: true,
    txHash: fakeHash,
    amount,
    token,
    message: `‚úÖ –î–µ–º–æ: ${amount} ${tokenDisplay} "–ø–æ–ª—É—á–µ–Ω—ã" (—Å–∏–º—É–ª—è—Ü–∏—è)`,
    isDemo: true
  })
}

/**
 * GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—É–ª–¥–∞—É–Ω–∞
 */
export async function GET(request: NextRequest) {
  const shouldUseReal = shouldUseRealMinting()
  
  if (shouldUseReal) {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API
    try {
      const realResponse = await fetch(`${request.nextUrl.origin}/api/mint-tokens-real${request.nextUrl.search}`)
      const result = await realResponse.json()
      return NextResponse.json(result, { status: realResponse.status })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—É–ª–¥–∞—É–Ω–∞:', error)
    }
  }
  
  // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ - –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –º–∏–Ω—Ç–∏—Ç—å
  return NextResponse.json({
    canMint: true,
    remainingTime: 0,
    lastMint: null,
    isDemo: true
  })
}
