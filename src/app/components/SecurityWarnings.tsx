'use client'

import { useState, useEffect } from 'react'
import { useAccount } from 'wagmi'

interface SecurityWarning {
  id: string
  type: 'warning' | 'error' | 'info'
  title: string
  message: string
  action?: {
    text: string
    onClick: () => void
  }
  dismissible?: boolean
  autoHide?: number // —Å–µ–∫—É–Ω–¥—ã
}

export function SecurityWarnings() {
  const { address, isConnected } = useAccount()
  const [warnings, setWarnings] = useState<SecurityWarning[]>([])
  const [dismissed, setDismissed] = useState<Set<string>>(new Set())

  useEffect(() => {
    if (!isConnected) return

    const checkSecurityWarnings = () => {
      const newWarnings: SecurityWarning[] = []

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
      const chainId = process.env.NEXT_PUBLIC_CHAIN_ID
      if (chainId === '1') {
        newWarnings.push({
          id: 'mainnet-warning',
          type: 'warning',
          title: '‚ö†Ô∏è Mainnet —Ä–µ–∂–∏–º',
          message: '–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –±–æ–ª—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏.',
          dismissible: true
        })
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω—ã –≥–∞–∑–∞
      checkGasPrice().then(gasPrice => {
        if (gasPrice > 100) {
          newWarnings.push({
            id: 'high-gas',
            type: 'warning',
            title: '‚õΩ –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞',
            message: `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: ${gasPrice} gwei. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å.`,
            dismissible: true,
            autoHide: 30
          })
        }
      })

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ slippage tolerance
      const savedSlippage = localStorage.getItem('slippageTolerance')
      if (savedSlippage && parseFloat(savedSlippage) > 3) {
        newWarnings.push({
          id: 'high-slippage',
          type: 'error',
          title: 'üö® –í—ã—Å–æ–∫–∏–π slippage',
          message: `Slippage —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${savedSlippage}%. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–æ–ª—å—à–∏–º –ø–æ—Ç–µ—Ä—è–º!`,
          action: {
            text: '–ò–∑–º–µ–Ω–∏—Ç—å',
            onClick: () => {
              localStorage.setItem('slippageTolerance', '0.5')
              setWarnings(prev => prev.filter(w => w.id !== 'high-slippage'))
            }
          }
        })
      }

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const securityLogs = JSON.parse(localStorage.getItem('securityLogs') || '[]')
      const recentLogs = securityLogs.filter((log: any) => 
        Date.now() - log.timestamp < 3600000 // –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
      )
      
      if (recentLogs.length > 5) {
        newWarnings.push({
          id: 'suspicious-activity',
          type: 'warning',
          title: 'üîç –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
          message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –≤—ã.',
          dismissible: true
        })
      }

      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ MetaMask
      if (typeof window !== 'undefined') {
        if (!window.ethereum) {
          newWarnings.push({
            id: 'no-wallet',
            type: 'error',
            title: 'ü¶ä –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            message: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask –∏–ª–∏ –¥—Ä—É–≥–æ–π Web3 –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.',
            action: {
              text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MetaMask',
              onClick: () => window.open('https://metamask.io/', '_blank')
            }
          })
        }
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      const filteredWarnings = newWarnings.filter(w => !dismissed.has(w.id))
      setWarnings(filteredWarnings)
    }

    checkSecurityWarnings()
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const interval = setInterval(checkSecurityWarnings, 30000) // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    return () => clearInterval(interval)
  }, [isConnected, dismissed])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  useEffect(() => {
    warnings.forEach(warning => {
      if (warning.autoHide) {
        setTimeout(() => {
          dismissWarning(warning.id)
        }, warning.autoHide * 1000)
      }
    })
  }, [warnings])

  const dismissWarning = (id: string) => {
    setDismissed(prev => new Set([...prev, id]))
    setWarnings(prev => prev.filter(w => w.id !== id))
  }

  if (warnings.length === 0) return null

  return (
    <div className="security-warnings">
      {warnings.map(warning => (
        <div
          key={warning.id}
          className={`security-warning ${warning.type}`}
        >
          <div className="warning-content">
            <div className="warning-header">
              <h4 className="warning-title">{warning.title}</h4>
              {warning.dismissible && (
                <button
                  onClick={() => dismissWarning(warning.id)}
                  className="dismiss-button"
                  aria-label="–ó–∞–∫—Ä—ã—Ç—å"
                >
                  ‚úï
                </button>
              )}
            </div>
            
            <p className="warning-message">{warning.message}</p>
            
            {warning.action && (
              <button
                onClick={warning.action.onClick}
                className="warning-action-button"
              >
                {warning.action.text}
              </button>
            )}
          </div>
        </div>
      ))}
      
      <style jsx>{`
        .security-warnings {
          position: fixed;
          top: 80px;
          right: 20px;
          z-index: 1000;
          max-width: 400px;
          space-y: 10px;
        }
        
        .security-warning {
          background: white;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          padding: 16px;
          margin-bottom: 10px;
          border-left: 4px solid;
          animation: slideIn 0.3s ease-out;
        }
        
        .security-warning.warning {
          border-left-color: #f59e0b;
          background: #fef3c7;
        }
        
        .security-warning.error {
          border-left-color: #dc2626;
          background: #fee2e2;
        }
        
        .security-warning.info {
          border-left-color: #2563eb;
          background: #dbeafe;
        }
        
        .warning-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 8px;
        }
        
        .warning-title {
          font-size: 14px;
          font-weight: 600;
          margin: 0;
          color: #1f2937;
        }
        
        .dismiss-button {
          background: none;
          border: none;
          font-size: 18px;
          cursor: pointer;
          color: #6b7280;
          padding: 0;
          width: 24px;
          height: 24px;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 4px;
          transition: all 0.2s;
        }
        
        .dismiss-button:hover {
          background: rgba(0, 0, 0, 0.1);
          color: #374151;
        }
        
        .warning-message {
          font-size: 13px;
          color: #374151;
          margin: 0 0 12px 0;
          line-height: 1.4;
        }
        
        .warning-action-button {
          background: #3b82f6;
          color: white;
          border: none;
          padding: 6px 12px;
          border-radius: 4px;
          font-size: 12px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s;
        }
        
        .warning-action-button:hover {
          background: #2563eb;
        }
        
        @keyframes slideIn {
          from {
            transform: translateX(100%);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
        
        @media (max-width: 640px) {
          .security-warnings {
            position: relative;
            top: auto;
            right: auto;
            max-width: 100%;
            margin: 10px;
          }
        }
      `}</style>
    </div>
  )
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –≥–∞–∑–∞
 */
async function checkGasPrice(): Promise<number> {
  try {
    if (typeof window !== 'undefined' && window.ethereum) {
      const { ethers } = await import('ethers')
      const provider = new ethers.providers.Web3Provider(window.ethereum)
      const gasPrice = await provider.getGasPrice()
      return parseFloat(ethers.utils.formatUnits(gasPrice, 'gwei'))
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞:', error)
  }
  return 0
}

/**
 * –•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export function useSecurityWarnings() {
  const addWarning = (warning: Omit<SecurityWarning, 'id'>) => {
    const warningWithId = {
      ...warning,
      id: `custom-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º context
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.warn('Security warning:', warningWithId)
    
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å React Context –∏–ª–∏ state management
    return warningWithId.id
  }
  
  return { addWarning }
}
