'use client'

import { useState } from 'react'
import { useAccount, useChainId } from 'wagmi'
import { providers, Contract } from 'ethers'
import { parseUnits } from 'ethers/lib/utils'
import toast from 'react-hot-toast'
import { getNetworkConfig } from '../utils/constants'

// ABI –¥–ª—è mint —Ñ—É–Ω–∫—Ü–∏–∏ MockERC20
const MOCK_ERC20_ABI = [
  'function mint(address to, uint256 amount) public',
  'function name() view returns (string)',
  'function symbol() view returns (string)',
  'function decimals() view returns (uint8)'
]

export function TestFaucet() {
  const { address, isConnected } = useAccount()
  const chainId = useChainId()
  const [isLoading, setIsLoading] = useState(false)

  const networkConfig = getNetworkConfig()
  const isLocalhost = chainId === 31337

  // –¢–æ–ª—å–∫–æ –¥–ª—è localhost –ø–æ–∫–∞–∑—ã–≤–∞–µ–º faucet
  if (!isLocalhost || !isConnected) {
    return null
  }

  const handleMintTokens = async (tokenSymbol: string) => {
    if (!address) return

    setIsLoading(true)
    try {
      const web3Provider = new providers.Web3Provider(window.ethereum as providers.ExternalProvider)
      const signer = web3Provider.getSigner()
      
      const tokenAddress = networkConfig.TOKEN_ADDRESSES[tokenSymbol]
      if (!tokenAddress) {
        toast.error(`–¢–æ–∫–µ–Ω ${tokenSymbol} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
        return
      }

      const tokenContract = new Contract(tokenAddress, MOCK_ERC20_ABI, signer)
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
      const [, symbol, decimals] = await Promise.all([
        tokenContract.name(),
        tokenContract.symbol(),
        tokenContract.decimals()
      ])

      // –ú–∏–Ω—Ç–∏–º 1000 —Ç–æ–∫–µ–Ω–æ–≤
      const amount = parseUnits('1000', decimals)
      
      toast('–ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã...', { icon: '‚è≥' })
      
      const tx = await tokenContract.mint(address, amount)
      await tx.wait()
      
      toast.success(`–ü–æ–ª—É—á–µ–Ω–æ 1000 ${symbol}!`)
      
    } catch (error: unknown) {
      const err = error as { code?: number; message?: string }
      console.error('Mint error:', error)
      if (err.code === 4001) {
        toast('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', { icon: '‚ö†Ô∏è' })
      } else {
        toast.error(`–û—à–∏–±–∫–∞: ${err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
      }
    } finally {
      setIsLoading(false)
    }
  }

  const handleMintETH = async () => {
    if (!address) return

    setIsLoading(true)
    try {
      const web3Provider = new providers.Web3Provider(window.ethereum as providers.ExternalProvider)
      const signer = web3Provider.getSigner()
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 10 ETH —Å –æ–¥–Ω–æ–≥–æ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Hardhat
      // –í localhost —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      toast('–ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ETH...', { icon: '‚è≥' })
      
      const tx = await signer.sendTransaction({
        to: address,
        value: parseUnits('10', 18) // 10 ETH
      })
      
      await tx.wait()
      toast.success('–ü–æ–ª—É—á–µ–Ω–æ 10 ETH!')
      
    } catch (error: unknown) {
      const err = error as { code?: number; message?: string }
      console.error('ETH mint error:', error)
      if (err.code === 4001) {
        toast('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', { icon: '‚ö†Ô∏è' })
      } else {
        // –î–ª—è ETH –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        toast.error('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ETH –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã Hardhat —Å –±–∞–ª–∞–Ω—Å–æ–º')
      }
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="test-faucet">
      <div className="faucet-header">
        <h3>üö∞ –¢–µ—Å—Ç–æ–≤—ã–π –∫—Ä–∞–Ω</h3>
        <p>–ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞</p>
      </div>
      
      <div className="faucet-buttons">
        <button 
          onClick={handleMintETH}
          disabled={isLoading}
          className="faucet-btn eth-btn"
        >
          {isLoading ? '‚è≥' : 'üíé'} –ü–æ–ª—É—á–∏—Ç—å 10 ETH
        </button>
        
        <button 
          onClick={() => handleMintTokens('USDT')}
          disabled={isLoading}
          className="faucet-btn usdt-btn"
        >
          {isLoading ? '‚è≥' : 'üíµ'} –ü–æ–ª—É—á–∏—Ç—å 1000 USDT
        </button>
        
        <button 
          onClick={() => handleMintTokens('USDC')}
          disabled={isLoading}
          className="faucet-btn usdc-btn"
        >
          {isLoading ? '‚è≥' : 'üí∞'} –ü–æ–ª—É—á–∏—Ç—å 1000 USDC
        </button>
        
        <button 
          onClick={() => handleMintTokens('DAI')}
          disabled={isLoading}
          className="faucet-btn dai-btn"
        >
          {isLoading ? '‚è≥' : 'ü™ô'} –ü–æ–ª—É—á–∏—Ç—å 1000 DAI
        </button>
      </div>
      
      <div className="faucet-info">
        <p>‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ localhost —Å–µ—Ç–∏</p>
        <p>üîÑ –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑</p>
      </div>
    </div>
  )
}
