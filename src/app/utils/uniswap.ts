import { utils } from 'ethers';
import { TokenMap as ConstantsTokenMap } from './constants';
import { getRealQuote, checkLiquidity } from './uniswap-real';
const { parseUnits, formatUnits } = utils;

export interface QuoteResult {
  quotedAmount: string;
  protocolFee: string;
  priceImpact?: string;
  gasEstimate?: string;
}

// –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ constants)
export const TokenMap = ConstantsTokenMap;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–ª–∏ mock –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ç–∏
 */
export async function quoteExactInput(
  fromSymbol: string,
  toSymbol: string,
  amount: string,
  slippagePercent: number
): Promise<QuoteResult> {
  const tokenIn = TokenMap[fromSymbol as keyof typeof TokenMap];
  const tokenOut = TokenMap[toSymbol as keyof typeof TokenMap];
  if (!tokenIn || !tokenOut) {
    throw new Error(`Unsupported token ${fromSymbol} or ${toSymbol}`);
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
  const shouldUseReal = await shouldUseRealQuotes();
  
  if (shouldUseReal) {
    try {
      console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${fromSymbol} -> ${toSymbol}`);
      const realQuote = await getRealQuote(fromSymbol, toSymbol, amount, slippagePercent);
      
      return {
        quotedAmount: realQuote.quotedAmount,
        protocolFee: realQuote.fee,
        priceImpact: realQuote.priceImpact,
        gasEstimate: realQuote.gasEstimate
      };
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
      // Fallback –Ω–∞ mock –∫–æ—Ç–∏—Ä–æ–≤–∫—É
    }
  }
  
  // Mock –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ (–¥–ª—è localhost –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫)
  console.log(`üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ mock –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${fromSymbol} -> ${toSymbol}`);
  return getMockQuote(fromSymbol, toSymbol, amount, slippagePercent);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
 */
async function shouldUseRealQuotes(): Promise<boolean> {
  const chainId = process.env.NEXT_PUBLIC_CHAIN_ID || '1';
  
  // –î–ª—è localhost –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock
  if (chainId === '31337') {
    return false;
  }
  
  // –î–ª—è mainnet –∏ sepolia –ø—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
  if (chainId === '1' || chainId === '11155111') {
    return true;
  }
  
  return false;
}

/**
 * Mock –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
 */
function getMockQuote(
  fromSymbol: string,
  toSymbol: string,
  amount: string,
  slippagePercent: number
): QuoteResult {
  const tokenIn = TokenMap[fromSymbol as keyof typeof TokenMap];
  const tokenOut = TokenMap[toSymbol as keyof typeof TokenMap];
  
  const amountIn = parseUnits(amount, tokenIn.decimals);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ mock –∫—É—Ä—Å—ã (–±–ª–∏–∂–µ –∫ —Ä–µ–∞–ª—å–Ω—ã–º)
  const mockRates: Record<string, Record<string, number>> = {
    'ETH': { 'USDC': 3500, 'USDT': 3500, 'WETH': 1 },
    'USDC': { 'ETH': 1/3500, 'USDT': 1, 'WETH': 1/3500 },
    'USDT': { 'ETH': 1/3500, 'USDC': 1, 'WETH': 1/3500 },
    'WETH': { 'ETH': 1, 'USDC': 3500, 'USDT': 3500 }
  };
  
  const rate = mockRates[fromSymbol]?.[toSymbol] || 1;
  const amountInFloat = parseFloat(formatUnits(amountIn, tokenIn.decimals));
  const amountOutFloat = amountInFloat * rate;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é 0.1%
  const feeAmount = amountInFloat * 0.001; // 0.1%
  const amountAfterFee = amountOutFloat * (1 - 0.001);
  
  const mockQuote = parseUnits(amountAfterFee.toFixed(tokenOut.decimals), tokenOut.decimals);
  const protocolFee = parseUnits(feeAmount.toFixed(tokenIn.decimals), tokenIn.decimals);
  
  return {
    quotedAmount: mockQuote.toString(),
    protocolFee: protocolFee.toString(),
    priceImpact: '0.1', // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π impact –¥–ª—è mock
    gasEstimate: '150000'
  };
}
