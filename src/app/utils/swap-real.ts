// src/app/utils/swap-real.ts
import { providers, Contract, BigNumber } from 'ethers'
import { parseUnits } from 'ethers/lib/utils'
import { PROXY_SWAP_ADDRESS, TokenMap } from './constants'
import { getRealQuote } from './uniswap-real'

// ABI –¥–ª—è –Ω–æ–≤–æ–≥–æ RealProxySwap –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const REAL_PROXY_SWAP_ABI = [
  // ETH -> Token
  'function swapExactETHForTokens(address tokenOut, uint256 amountOutMinimum, uint24 poolFee, uint256 deadline) external payable returns (uint256)',
  // Token -> ETH  
  'function swapExactTokensForETH(address tokenIn, uint256 amountIn, uint256 amountOutMinimum, uint24 poolFee, uint256 deadline) external returns (uint256)',
  // Token -> Token
  'function swapExactInputSingle(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOutMinimum, uint24 poolFee, uint256 deadline) external returns (uint256)',
  // –ö–æ—Ç–∏—Ä–æ–≤–∫–∏
  'function getQuote(address tokenIn, address tokenOut, uint256 amountIn, uint24 poolFee) external returns (uint256)',
  // Utility
  'function supportedTokens(address) external view returns (bool)',
  'function getBalance(address) external view returns (uint256)',
  'function getProtocolFees(address) external view returns (uint256)'
]

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI ERC20 –¥–ª—è allowance/approve
const ERC20_ABI = [
  'function allowance(address owner, address spender) view returns (uint256)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function balanceOf(address account) view returns (uint256)'
]

// Fee tiers –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä —Ç–æ–∫–µ–Ω–æ–≤
const POOL_FEES = {
  // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã - –Ω–∏–∑–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è
  'USDC-USDT': 100,    // 0.01%
  'USDT-USDC': 100,
  // ETH –ø–∞—Ä—ã - —Å—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è
  'ETH-USDC': 3000,    // 0.3%
  'USDC-ETH': 3000,
  'ETH-USDT': 3000,
  'USDT-ETH': 3000,
  'ETH-WETH': 500,     // 0.05%
  'WETH-ETH': 500,
  // WETH –ø–∞—Ä—ã
  'WETH-USDC': 3000,
  'USDC-WETH': 3000,
  'WETH-USDT': 3000,
  'USDT-WETH': 3000,
  // Default
  'DEFAULT': 3000
} as const;

export interface RealSwapParams {
  fromToken: string
  toToken: string
  amount: string
  slippage: number
  userAddress: string
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–≤–∞–ø–∞ —á–µ—Ä–µ–∑ Uniswap V3
 */
export async function executeRealSwap(params: RealSwapParams): Promise<string> {
  const { fromToken, toToken, amount, slippage, userAddress } = params

  if (!window.ethereum) {
    throw new Error('MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω')
  }

  const provider = new providers.Web3Provider(window.ethereum)
  const signer = provider.getSigner()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∞–¥—Ä–µ—Å—É
  const connectedAddress = await signer.getAddress()
  if (connectedAddress.toLowerCase() !== userAddress.toLowerCase()) {
    throw new Error('–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç')
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
  const fromTokenInfo = TokenMap[fromToken]
  const toTokenInfo = TokenMap[toToken]

  if (!fromTokenInfo || !toTokenInfo) {
    throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω')
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
  const amountIn = parseUnits(amount, fromTokenInfo.decimals)

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Ö–æ–¥–Ω–æ–π —Å—É–º–º—ã
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–≤–∞–ø–∞...')
    const { quotedAmount } = await getRealQuote(fromToken, toToken, amount, slippage)
    const expectedOut = BigNumber.from(quotedAmount)
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º slippage
    const slippageBp = Math.floor(slippage * 100) // –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö
    const minAmountOut = expectedOut.mul(10000 - slippageBp).div(10000)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º fee tier –¥–ª—è –ø–∞—Ä—ã
    const feeKey = `${fromToken}-${toToken}`
    const poolFee = POOL_FEES[feeKey as keyof typeof POOL_FEES] || POOL_FEES.DEFAULT

    // Deadline —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
    const deadline = Math.floor(Date.now() / 1000) + 1200

    console.log('üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–≤–∞–ø–∞:', {
      fromToken,
      toToken,
      amountIn: amountIn.toString(),
      minAmountOut: minAmountOut.toString(),
      poolFee,
      deadline,
      slippage: `${slippage}%`
    })

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const swapContract = new Contract(PROXY_SWAP_ADDRESS, REAL_PROXY_SWAP_ABI, signer)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–∫–µ–Ω–æ–≤
    if (fromToken !== 'ETH') {
      const isSupported = await swapContract.supportedTokens(fromTokenInfo.address)
      if (!isSupported) {
        throw new Error(`–¢–æ–∫–µ–Ω ${fromToken} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º`)
      }
    }

    if (toToken !== 'ETH') {
      const isSupported = await swapContract.supportedTokens(toTokenInfo.address)
      if (!isSupported) {
        throw new Error(`–¢–æ–∫–µ–Ω ${toToken} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º`)
      }
    }

    let tx

    if (fromToken === 'ETH') {
      // ETH -> Token
      console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º ETH -> Token —Å–≤–∞–ø')
      tx = await swapContract.swapExactETHForTokens(
        toTokenInfo.address,
        minAmountOut,
        poolFee,
        deadline,
        { value: amountIn }
      )
    } else if (toToken === 'ETH') {
      // Token -> ETH
      console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º Token -> ETH —Å–≤–∞–ø')
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      const tokenContract = new Contract(fromTokenInfo.address, ERC20_ABI, signer)
      const allowance = await tokenContract.allowance(userAddress, PROXY_SWAP_ADDRESS)
      
      if (allowance.lt(amountIn)) {
        console.log('üîÑ –î–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...')
        const approveTx = await tokenContract.approve(PROXY_SWAP_ADDRESS, amountIn)
        await approveTx.wait()
        console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ')
      }

      tx = await swapContract.swapExactTokensForETH(
        fromTokenInfo.address,
        amountIn,
        minAmountOut,
        poolFee,
        deadline
      )
    } else {
      // Token -> Token
      console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º Token -> Token —Å–≤–∞–ø')
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      const tokenContract = new Contract(fromTokenInfo.address, ERC20_ABI, signer)
      const allowance = await tokenContract.allowance(userAddress, PROXY_SWAP_ADDRESS)
      
      if (allowance.lt(amountIn)) {
        console.log('üîÑ –î–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...')
        const approveTx = await tokenContract.approve(PROXY_SWAP_ADDRESS, amountIn)
        await approveTx.wait()
        console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ')
      }

      tx = await swapContract.swapExactInputSingle(
        fromTokenInfo.address,
        toTokenInfo.address,
        amountIn,
        minAmountOut,
        poolFee,
        deadline
      )
    }

    console.log('üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash)
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const receipt = await tx.wait()
    console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Å–≤–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω:', receipt.transactionHash)

    return receipt.transactionHash

  } catch (error: unknown) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–≤–∞–ø–∞:', error)
    
    const err = error as { code?: number | string; message?: string; reason?: string }
    
    if (err.code === 4001) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é')
    } else if (err.code === 'INSUFFICIENT_FUNDS') {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–∞–∑–∞')
    } else if (err.message?.includes('slippage') || err.reason?.includes('slippage')) {
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ')
    } else if (err.message?.includes('EXPIRED')) {
      throw new Error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    } else if (err.message?.includes('supported')) {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
    } else {
      throw new Error(err.message || err.reason || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞')
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
 */
export async function checkTokenSupport(tokenSymbol: string): Promise<boolean> {
  try {
    if (tokenSymbol === 'ETH') return true // ETH –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    
    const provider = new providers.Web3Provider(window.ethereum)
    const contract = new Contract(PROXY_SWAP_ADDRESS, REAL_PROXY_SWAP_ABI, provider)
    const tokenInfo = TokenMap[tokenSymbol]
    
    if (!tokenInfo) return false
    
    return await contract.supportedTokens(tokenInfo.address)
  } catch (error) {
    console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–∫–µ–Ω–∞ ${tokenSymbol}:`, error)
    return false
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 */
export async function getContractBalance(tokenSymbol: string): Promise<string> {
  try {
    const provider = new providers.Web3Provider(window.ethereum)
    const contract = new Contract(PROXY_SWAP_ADDRESS, REAL_PROXY_SWAP_ABI, provider)
    const tokenInfo = TokenMap[tokenSymbol]
    
    const balance = await contract.getBalance(
      tokenSymbol === 'ETH' ? '0x0000000000000000000000000000000000000000' : tokenInfo.address
    )
    
    return balance.toString()
  } catch (error) {
    console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è ${tokenSymbol}:`, error)
    return '0'
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
 */
export async function getProtocolFees(tokenSymbol: string): Promise<string> {
  try {
    const provider = new providers.Web3Provider(window.ethereum)
    const contract = new Contract(PROXY_SWAP_ADDRESS, REAL_PROXY_SWAP_ABI, provider)
    const tokenInfo = TokenMap[tokenSymbol]
    
    const fees = await contract.getProtocolFees(
      tokenSymbol === 'ETH' ? '0x0000000000000000000000000000000000000000' : tokenInfo.address
    )
    
    return fees.toString()
  } catch (error) {
    console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è ${tokenSymbol}:`, error)
    return '0'
  }
}
